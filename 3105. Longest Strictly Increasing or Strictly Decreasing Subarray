3105. Longest Strictly Increasing or Strictly Decreasing Subarray

#Using two pointer
class Solution {

    public int longestMonotonicSubarray(int[] nums) {

        int maxLen = 0;
        //Strictly Increasing
        for(int i=0;i<nums.length;i++){
            int currLen=1;
            for(int j=i+1;j<nums.length;j++){
                if(nums[j] > nums[j-1])
                    currLen++;
                else
                    break;
            }

            maxLen = Math.max(maxLen,currLen);
        }

        //Strictly Decreasing
        for(int i=0;i<nums.length;i++){
            int currLen=1;
            for(int j=i+1;j<nums.length;j++){
                if(nums[j] < nums[j-1])
                    currLen++;
                else
                    break;
            }
            maxLen = Math.max(maxLen,currLen);
        }

        return maxLen;
        
    }
}


#Using Single Loop
class Solution {

    public int longestMonotonicSubarray(int[] nums) {
        int maxLen = 1;
        int incLen = 1;
        int decLen = 1;

        for(int i=0;i<nums.length-1;i++){
            if(nums[i+1] > nums[i]){
                incLen++;
                decLen = 1;
            }else if(nums[i+1] < nums[i]){
                incLen = 1;
                decLen++;
            }else{
                incLen=1;
                decLen=1;
            }

            maxLen = Math.max(maxLen, Math.max(incLen,decLen));
        }

        return maxLen;
    }
}


